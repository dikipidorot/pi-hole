# 官方文档
# https://containrrr.dev/watchtower
# https://hub.docker.com/r/containrrr/watchtower
# 修改自微信群友：香草口味的模板

---
version: "3"
# 最后编辑时间：2024-05-10
services:
  watchtower:
    image: containrrr/watchtower:latest
    # 镜像名字
    container_name: watchtower
    # 容器名字
    hostname: watchtower
    # 主机名
    network_mode: host
    # 并不存在端口，只是减少新增网络
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # docker核心
    environment:
      - WATCHTOWER_CLEANUP=true
      # 更新后移除旧的镜像
      - TZ=Asia/Shanghai
      # 时区
      ########################################
      # 
      # 以下内容为开启通知的配置（可选项）
      # - WATCHTOWER_NOTIFICATION_URL=
      # 使用通知服务URL参数，多个通知可用空格隔开，其他可选通知如下：
      # 其他支持的通知服务详见 https://containrrr.dev/shoutrrr/v0.8/services/overview
      #
      # smtp://{用户名}:{密码}@{域名}:{端口}/?starttls=Yes&from={发件人}&to={收件人A,收件人B}
      # 例子：smtp://666@qq.com:xxx@smtp.qq.com:465/?starttls=Yes&from=666@qq.com&to=10001@qq.com
      # Email
      # telegram://{token令牌}@telegram?chats={channel频道}  
      # Bark
      # bark://devicekey@host
      # Slack
      # slack://hook:T00000000-B00000000-XXXXXXXXXXXXXXXXXXXXXXXX@webhook
      # 例子：slack://hook:T000-B000-000@webhook
      #
      ########################################
      #
      # - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      # 控制用于通知的日志级别，值：panic(严重)>fatal(致命)>error(错误)>warn(警告)>info(常规)>debug(调试)>trace(跟踪,最详细)
      # - WATCHTOWER_NOTIFICATIONS_HOSTNAME=watchtower
      # 在主题/标题中指定的自定义主机名
      # - WATCHTOWER_NOTIFICATION_TITLE_TAG=tag_name
      # 要包含在标题中的前缀，在运行多个瞭望塔时很有用。
      # - WATCHTOWER_NOTIFICATION_REPORT=true
      # 使用会话报告模板模式
      #
      ########################################
      #
      # 默认情况下，间隔一定时间，检测到容器的镜像有变化就会自动更新，如果不想全部都更新，可以使用该部分内容
    # command:
      # --schedule "0 30 8 * * *" "watchtower app01 app02 app03"
      # 计划任务使用6个字段（而不是传统的5个字段）的Cron表达式，用于定义检查新图像的时间和频率。
      # "0 30 8 * * *"意思为"秒 分 时 天 月 周"
      # "app01 app02 app03"，需要自动更新的容器名字，多个容器时用空格分隔
      # --interval "86400"
      # 轮询间隔，单位为秒，此值控制瞭望塔轮询新图像的频率。轮询间隔和计划任务不能同时定义两者
      # --stop-timeout "30s"
      # 设置在强制停止容器之前默认等待时间，单位为秒
      # --run-once
      # 立即对容器名称列表运行一次更新尝试，然后退出
      # "app01 app02"
      #
      ########################################
    restart: always
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
