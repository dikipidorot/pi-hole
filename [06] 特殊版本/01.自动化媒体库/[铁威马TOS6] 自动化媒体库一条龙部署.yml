##############################################
# 自动化媒体库的工作流程
# MP负责订阅搜刮PT站内的资源，将种子以及下载路径(容器的路径)，发送给QB/TR进行下载
# 当MP检测下载完毕后，将会根据整理刮削命名规则进行处理，转移到媒体库目录中
# 这样一来，PEJ检测到本地有新的媒体入库，并且本地已经存在刮削数据可以读取，即完成入库
# iyuu是用于辅助做种的；v2raya是用于解决网络不顺畅的问题，可以不搞；cookiecloud用于定期把电脑浏览器的PT站cookie同步到MP上
# QB适合下种，TR适合做种
#
##############################################
# 重要内容，硬链接只能够存在于同一个存储池上
# 重要内容，硬链接只能够存在于同一个存储池上
# 重要内容，硬链接只能够存在于同一个存储池上
#
# /Volume1/media
#               |---/动漫
#               |---/下载
#               |
#               |---/电影
#               |     |---/国产电影
#               |     |---/欧美电影
#               |     |---/日韩电影
#               |
#               |---/电视剧
#                      |---/国产电视剧
#                      |---/欧美电视剧
#                      |---/日韩电视剧
#
# ①：/Volume1/media——————media为共享文件夹，存储池预设为第1个存储池，请根据自己实际情况修改【这是实际路径】
# ②：/Volume1/media/下载——————用于QB和TR下载，MP中设置对应的容器路径/downloads用于传递【这是实际路径】
# ③：/Volume1/media/电影；/Volume1/media/电视剧——————用于媒体库的分类存放，可根据自己需要增添【这是实际路径】
# ④：请在MP设置中，把下载目录设置为“/meida/下载”；把 电影/电视剧 等分类的目录设置从“/meida”开始选择【这是容器路径】
# ⑤：MP和QB,TR都使用同一条路径映射“/meida/下载”【必须完全一样】
# 不懂可以看看MP-01和MP-03这两张图，MP-02是效果图
# ⑥：/Volume1/media/动漫——————用于ani-rss动漫bt下载，自身带重命名整理功能，刮削功能可以由PEJ负责
# ⑦：注意，需要在ani-rss的设置中，将下载地址修改为/ani-rss
#
##############################################
# 注意事项
# 本模板包含PLEX,EMBY,JF,QB,TR,MP,ANI-RSS,COOKIECLOUD,IYUU,V2RAYA,WATCHTOWER
# 如果设置了使用网络代理(不一定是v2raya，可以是软路由)，请提前启用并激活好魔法，否则EMBY,JF,MP无法正常连接TMDB，MP可能无法正常下载核心文件
# 模板预设使用的网络代理为v2raya的http端口20171，如果使用了别的，请根据实际情况修改，总不会有人连魔法都不会用不？不会吧？不会吧？
# 部分参数不说明，如果想知道有什么用，可以参考其他的模板
# 权限均设置为root以保证访问不会出错，注释内容多多阅读
# 媒体库路径预设使用第一个存储池/Volume1，请根据实际情况修改
# 媒体库，iyuu，cookiecloud使用bridge；其余统一使用host，需要改变端口就去修改变量，看注释说明
# iyuu使用host模式会占用mariadb/mysql的3306端口，所以使用bridge
# QB和TR使用host，只要宿主机拥有IPV6，即可连上IPV6传输数据，如果宿主机没有，请检查网络环境
# 
# EMBY和JF在【控制台-高级】中生成【API密钥】，MP需要用
# PLEX需要注册登录生成登录密钥，用于登录使用，设置好后，浏览器F12->网络，从Plex请求URL中获取的X-Plex-Token，MP需要用
#
# QB 初始化账号为 admin，密码在日志中查看
# QB修改：用于传入连接的端口，随机生成一个，记得看站规
# QB关闭：启用 DHT (去中心化网络) 以找到更多用户
# QB关闭：启用用户交换 (PeX) 以找到更多用户
# QB关闭：启用本地用户发现以找到更多用户
# QB关闭：启用跨站请求伪造 (CSRF) 保护
#
# TR需要把汉化文件存放到对应目录，看注释说明
# TR打开：启用随机端口，或使用固定端口。并且在路由器上做好端口映射，如果有公网的话
# TR关闭：启用本地用户发现(LPD)
# TR关闭：启用带宽管理(µTP)
# TR关闭：启用分布式哈希表(DHT)
# TR关闭：启用用户交换
#
# iyuu需要注册扫码获取token，初始化安装第一步只需要输入token即可
#
# 在/mnt/user/appdata/v2raya这个目录下，请预先创建好一个 resolv.conf 的文件，用文本编辑保存后修改后缀即可，也可以使用ssh命令vi/nano生成
# v2raya设置中激活【开启端口分享】
#
# MP如果遇到cookiecloud设置正确但是无法同步成功的，试试重启几次再去同步，实在不是，手动添加吧
# MP v2.0.7及以上版本，已支持通过UI进行用户认证：点击用户头像 -> 用户认证，无需配置环境变量，模板继续保留原有的认证变量
#
# ANI-RSS的用户名和密码均为 admin
#
# cookiecloud使用教程：https://post.smzdm.com/p/a905kd5p
#
##############################################
# 镜像地址
# https://hub.docker.com/r/linuxserver/plex
# https://hub.docker.com/r/linuxserver/emby
# https://hub.docker.com/r/nyanmisaka/jellyfin
# https://hub.docker.com/r/linuxserver/qbittorrent
# https://hub.docker.com/r/linuxserver/transmission
# https://hub.docker.com/r/jxxghp/moviepilot
# https://hub.docker.com/r/easychen/cookiecloud
# https://hub.docker.com/r/iyuucn/iyuuplus-dev
# https://hub.docker.com/r/mzz2017/v2raya
# https://hub.docker.com/r/wushuo894/ani-rss
# https://hub.docker.com/r/containrrr/watchtower
#
##############################################
# MP 文档
# https://github.com/jxxghp/MoviePilot
# https://wiki.movie-pilot.org
# MP 插件
# https://wiki.movie-pilot.org/zh/plugin
# PT玩家看站规！！！PT玩家看站规！！！PT玩家看站规！！！
#
# ani-rss 文档
# https://docs.wushuo.top
#
# iyuu 文档
# https://doc.iyuu.cn/guide/getting-started
#
# 媒体库规范化命名手册（PEJ通用）
# https://emby.media/support/articles/Home.html
# 
##############################################
# 各个服务的WebUI
# plex            ip:32400
# emby            ip:8096
# jellyfin        ip:8097
# qbittorrent     ip:8085
# transmission    ip:9091
# moviepilot      ip:55055
# ani-rss         ip:7789
# cookiecloud     ip:8188
# iyuu            ip:8780
# v2raya          ip:2017
# watchtower      不存在，后台自动更新容器镜像
#
##############################################

---
version: "3"
# 最后编辑时间：2025-02-11
services:
##############################################
#                                            #
#         媒体库部分，全选/不选/选其一        #
#                                            #
##############################################

  plex:
    image: linuxserver/plex:latest
    container_name: plex
    hostname: plex
    # privileged: true
    devices:
      - /dev/dri:/dev/dri
    # runtime: nvidia
    # 使用N卡的需要装好N卡驱动，并且设置这个参数
    volumes:
      - /Volume1/docker/plex:/config
      # 配置文件目录
      - /Volume1:/data
      # 媒体库目录，可以自定义，可以写多个
    environment:
      - PLEX_CLAIM=【登录密钥】
      # 登录密钥，打开下面的地址，注册并登录后获取，如果对账号注册有洁癖，plex账号哪怕你买了pass通行证也可以注销
      # https://plex.tv/claim
      # - NVIDIA_DRIVER_CAPABILITIES=all
      # - NVIDIA_VISIBLE_DEVICES=N卡的ID
      # 使用N卡的需要装好N卡驱动，并且设置这两个N卡参数
      - PUID=0
      - PGID=0
      - TZ=Asia/Shanghai
      # 以下是为PLEX添加网络代理，自行准备好魔法，将IP改为NAS的IP，如需使用，去掉#号注释
      # - NO_PROXY=172.17.0.1,127.0.0.1,localhost
      # 保持默认
      # - ALL_PROXY=http://IP:20171
      # - HTTP_PROXY=http://IP:20171
    network_mode: bridge
    ports:
      - 32400:32400
    restart: always

##############################################

  emby:
    image: linuxserver/emby:latest
    # 镜像地址，如需测试版追新，latest更改为beta，不区分设备架构
    # 如果使用开心版，将镜像改为 amilys/embyserver，arm64v8设备使用amilys/embyserver_arm64v8
    container_name: emby
    hostname: emby
    # privileged: true
    devices:
      - /dev/dri:/dev/dri
    # runtime: nvidia
    # 使用N卡的需要装好N卡驱动，并且设置这个参数
    volumes:
      - /Volume1/docker/emby:/config
      # 配置文件目录
      - /Volume1:/data
      # 媒体库目录，可以自定义，可以写多个
    environment:
      # - NVIDIA_DRIVER_CAPABILITIES=all
      # - NVIDIA_VISIBLE_DEVICES=N卡的ID
      # 使用N卡的需要装好N卡驱动，并且设置这两个N卡参数
      - PUID=0
      - PGID=0
      # 用户和用户组权限，这里写0 0以确保硬件转码能正常使用
      - UMASK=022
      - TZ=Asia/Shanghai
      # 以下是为EMBY添加网络代理，自行准备好魔法，将IP改为NAS的IP，如需使用，去掉#号注释
      # - NO_PROXY=172.17.0.1,127.0.0.1,localhost
      # 保持默认
      # - ALL_PROXY=http://IP:20171
      # - HTTP_PROXY=http://IP:20171
      # 更换为自己的http代理
    network_mode: bridge
    ports:
      - 8096:8096
    restart: always

##############################################

  jellyfin:
    image: nyanmisaka/jellyfin:latest
    # 镜像地址，无脑推荐使用ny大佬的JF，做好了全部修正优化，开箱即用  
    # x86设备默认用latest，arm64v8设备用latest-rockchip
    container_name: jellyfin
    hostname: jellyfin
    # privileged: true
    devices:
      - /dev/dri:/dev/dri
    # runtime: nvidia
    # 使用N卡的需要装好N卡驱动，并且设置这个参数
    volumes:
      - /Volume1/docker/jellyfin/config:/config
      # 配置文件目录
      - /Volume1:/media
      # 媒体库目录，可以自定义，可以写多个
      - /Volume1/docker/jellyfin/cache:/cache
      # 缓存目录
    environment:
      # - NVIDIA_DRIVER_CAPABILITIES=all
      # - NVIDIA_VISIBLE_DEVICES=N卡的ID
      # 使用N卡的需要装好N卡驱动，并且设置这两个N卡参数
      - TZ=Asia/Shanghai
      # 以下是为JF添加网络代理，自行准备好魔法，将IP改为NAS的IP，如需使用，去掉#号注释
      # - NO_PROXY=172.17.0.1,127.0.0.1,localhost
      # 保持默认
      # - ALL_PROXY=http://IP:20171
      # - HTTP_PROXY=http://IP:20171
      # 更换为自己的http代理
    network_mode: bridge
    ports:
      - 8097:8096
    restart: always

##############################################
#                                            #
#         下载器部分，全选/不选/选其一        #
#                                            #
##############################################

  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    hostname: qbittorrent
    volumes:
      - /Volume1/docker/qbittorrent:/config
      # 配置文件目录
      - /Volume1/media/下载:/downloads
      # 默认下载目录
      - /Volume1/media:/media
      # MP，QB，TR统一的下载目录，见上目录结构说明的④⑤
      - /Volume1/media/动漫:/ani-rss
      # ANI-RSS，QB，TR统一的下载目录，见上目录结构说明的⑥⑦
      # - 【这里替换为你想映射到QB内的路径】:/【这里替换为你想映射到QB内的路径】
      # 下载目录，可以自定义，可以写多个，这里如果你理解了映射是什么，就会明白是什么意思，如果不会，别写
      # - 【这里替换为你的数据存放目录】/Torrents监控自动下载目录:/watch
      # 种子监控自动下载目录，非必须，用于把种子放到目录内后，自动添加下载任务
    environment:
      - WEBUI_PORT=8085
      # 自定义WebUI端口
      - TORRENTING_PORT=25800
      # 自定义传输端口，别写6881，看站规！！！
      - PUID=0
      - PGID=0
      # 用户和用户组权限，ssh中使用“id 用户名”查看，一般为1000，100，有问题就写0，0
      - UMASK=022
      - TZ=Asia/Shanghai
    network_mode: host
    restart: always

##############################################

  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    hostname: transmission
    volumes:
      - /Volume1/docker/transmission:/config
      # 配置文件目录
      - /Volume1/media/下载:/downloads
      # 默认下载目录
      - /Volume1/media:/media
      # MP，QB，TR统一的下载目录，见上目录结构说明的④⑤
      - /Volume1/media/动漫:/ani-rss
      # ANI-RSS，QB，TR统一的下载目录，见上目录结构说明的⑥⑦
      # - 【这里替换为你想映射到TR内的路径】:/【这里替换为你想映射到TR内的路径】
      # 下载目录，可以自定义，可以写多个，这里如果你理解了映射是什么，就会明白是什么意思，如果不会，别写
      # - 【这里替换为你的数据存放目录】/Torrents监控自动下载目录:/watch
      # 种子监控自动下载目录，非必须，用于把种子放到目录内后，自动添加下载任务
    environment:
      - TRANSMISSION_WEB_HOME=/config/webui
      # WEBUI主页路径，写容器路径，用于放汉化文件
      # 汉化文件下载地址：https://github.com/ronggang/transmission-web-control
      # 将 "/src" 这个文件夹里的东西放到 "/config/webui" 内即可
      - USER=cheems
      - PASS=cheems
      # TR账号密码，预设为cheems，记住一定要修改密码，否则后果自负
      - PEERPORT=14569
      # 自定义peer传输端口
      - PUID=0
      - PGID=0
      # 用户和用户组权限，ssh中使用“id 用户名”查看，一般为1000，100，有问题就写0，0
      - UMASK=022
      - TZ=Asia/Shanghai
    network_mode: host
    # 如需修改WebUI的端口，到/config/setting.json中第54行的"rpc-port": 9091的端口改为自定义端口
    restart: always

##############################################
#                                            #
#       自动化刮削整理工具，根据需要部署      #
#                                            #
##############################################

  moviepilot-v2:
    image: jxxghp/moviepilot-v2:latest
    container_name: moviepilot-v2
    hostname: moviepilot-v2
    restart: always
    network_mode: host
##############################################
## 第一次运行时，MoviePilot 会下载大量文件到本地，请在留意日志中的进度，如果有什么问题，可以寻找网友求助
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # 使MP支持内建的重启操作，用于自动更新后重启
      - /Volume1/docker/moviepilot-v2/core:/moviepilot 
      ## 程序主目录
      - /Volume1/docker/moviepilot-v2/config:/config
      ## 配置目录
      - /Volume1/media/下载:/downloads
      # 默认下载目录
      - /Volume1/media:/media
      # MP，QB，TR统一的下载目录，见上目录结构说明的④⑤
      #
      - /Volume1/docker/qbittorrent/qBittorrent/BT_backup:/QB-BT
      - /Volume1/docker/transmission/torrents:/TR-BT
      # 用于自动转种所使用的路径，请根据实际情况修改，模板仅供参考，如不需要，则删除掉
      #
##############################################
    environment:
      - MOVIEPILOT_AUTO_UPDATE=true
      # 设置容器重启时自动更新，true/release/dev/false，默认release，插件的自动更新要设置为true
      # 需要能正常连接Github 注意：如果出现网络问题可以配置PROXY_HOST
      - NGINX_PORT=55055
      ## WebUI服务端口，预设为55055，默认为3000，可自行修改，不能和API服务端口3001冲突
      - SUPERUSER=cheems
      # 超级管理者用户名，默认为admin，可在MP内修改，初次安装后失效，预设为cheems
      # 密码在日志里，只会在第一次部署出现，否则得删除/config/user.db这个文件重新配置，注意查看，初次安装后失效，可在MP内修改
      # - PROXY_HOST=IP:20171
      # 网络代理，以便于访问一些网站，如果你没有配置魔法就注释掉，也支持sock5，具体看作者github项目的地址，默认不使用，如需使用，去掉#号注释
      - BIG_MEMORY_MODE=false
      # 是否使用大内存模式，true/false，默认不使用，开启后会增加缓存数量，占用更多的内存，但响应速度会更快
      - UMASK=022
      - TZ=Asia/Shanghai
      #
##############################################
#### 认证站点 ####
      - AUTH_SITE=iyuu,agsvpt,audiences,discfan,freefarm,haidan,hddolby,hdfans,hhclub,icc2022,ptba,ptvicomo,wintersakura,xingtan,zmpt,sunny,ptcafe,ptzone,kufei,yemapt
      ## 只有通过后才能使用站点相关功能，支持配置多个认证站点，使用英文逗号，进行分隔，会依次执行认证操作，直到有一个站点认证成功
      ## UID为网站分配给你的数字ID，请在个人信息内查看，切勿泄露
      ## 密钥在控制面板中查看，切勿泄露
      ## 以下认证写好后记得把#注释去掉
      ## 推荐红豆饭，因为支持iyuu和mp的认证（2024年5月注释）
      ## 这部分可以选择不写，MP已经支持在WebUI上进行认证
##############################################
      # - IYUU_SIGN=
      # iyuu的认证，输入IYUU的登录令牌即可，IYUU本身也是需要认证的
##############################################
      # - HHCLUB_USERNAME=
      # - HHCLUB_PASSKEY=
      # hhclub的用户名和密钥，注意这里是用户名
##############################################
      # - AUDIENCES_UID=
      # - AUDIENCES_PASSKEY=
      # audiences的用户UID和密钥
##############################################
      # - HDDOLBY_UID=
      # - HDDOLBY_PASSKEY=
      # hddolby的用户UID和密钥
##############################################
      # - ZMPT_UID=
      # - ZMPT_PASSKEY=
      # zmpt的用户UID和密钥
##############################################
      # - FREEFARM_UID=
      # - FREEFARM_PASSKEY=
      # freefarm的用户UID和密钥
##############################################
      # - HDFANS_UID=
      # - HDFANS_PASSKEY=
      # hdfans的用户UID和密钥
##############################################
      # - WINTERSAKURA_UID=
      # - WINTERSAKURA_PASSKEY=
      # wintersakura的用户UID和密钥
##############################################
      # - LEAVES_UID=
      # - LEAVES_PASSKEY=
      # leaves的用户UID和密钥
##############################################
      # - PTBA_UID=
      # - PTBA_PASSKEY=
      # ptba的用户UID和密钥
##############################################
      # - ICC2022_UID=
      # - ICC2022_PASSKEY=
      # icc2022的用户UID和密钥
##############################################
      # - XINGTAN_UID=
      # - XINGTAN_PASSKEY=
      # xingtan的用户UID和密钥
##############################################
      # - PTVICOMO_UID=
      # - PTVICOMO_PASSKEY=
      # ptvicomo的用户UID和密钥
##############################################
      # - AGSVPT_UID=
      # - AGSVPT_PASSKEY
      # agsvpt用户UID和密钥
##############################################
      # - HDKYL_UID=
      # - HDKYL_PASSKEY=
      # hdkyl的用户UID和密钥
##############################################
      # - QINGWA_UID=
      # - QINGWA_PASSKEY=
      # qingwa的用户UID和密钥
##############################################
      # - DISCFAN_UID=
      # - DISCFAN_PASSKEY=
      # discfan的用户UID和密钥
##############################################
      # - HAIDAN_UID=
      # - HAIDAN_PASSKEY=
      # haidan的用户UID和密钥
##############################################
      # - ROUSI_UID=
      # - ROUSI_PASSKEY=
      # rousi的用户UID和密钥
##############################################
      # - SUNNY_UID=
      # - SUNNY_PASSKEY=
      # sunny的用户UID和密钥
##############################################
      # - PTCAFE_UID=
      # - PTCAFE_PASSKEY=
      # ptcafe的用户UID和密钥
##############################################
      # - PTZONE_UID=
      # - PTZONE_PASSKEY=
      # ptzone的用户UID和密钥
##############################################
      # - KUFEI_UID=
      # - KUFEI_PASSKEY=
      # kufei的用户UID和密钥
##############################################
      # - YEMAPT_UID=
      # - YEMAPT_PASSKEY=
      # yemapt的用户UID和密钥

##############################################

  ani-rss:
    image: wushuo894/ani-rss:latest
    container_name: ani-rss
    hostname: ani-rss
    volumes:
      - /Volume1/docker/ani-rss:/config
      # 配置文件目录
      - /Volume1/media/动漫:/ani-rss
      # ANI-RSS，QB，TR统一的下载目录，见上目录结构说明的⑥⑦
    environment:
      - PORT=7789
      # 自定义容器端口
      - TZ=Asia/Shanghai
    network_mode: host
    restart: always

##############################################
#                                            #
#          其他辅助工具，根据需要部署         #
#                                            #
##############################################

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    hostname: watchtower
    network_mode: host
    # 并不存在端口，只是减少新增网络
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # docker核心
    environment:
      - WATCHTOWER_CLEANUP=true
      # 更新后移除旧的镜像
      - TZ=Asia/Shanghai
    restart: always

##############################################

  cookiecloud:
    image: easychen/cookiecloud:latest
    container_name: cookiecloud
    hostname: cookiecloud
    network_mode: bridge
    ports:
      - 8188:8088/tcp
      # WebUI 端口，可能会有别的服务使用8088，所以改用bridge
    restart: always

##############################################

  iyuuplus:
    image: iyuucn/iyuuplus-dev:latest
    container_name: iyuuplus
    hostname: iyuuplus
    volumes:
      - /Volume1/docker/iyuuplus/iyuu:/iyuu
      # 配置文件目录，存放源码
      - /Volume1/docker/iyuuplus/data:/data
      # 数据库目录，存放mysql数据库
    network_mode: bridge
    ports:
      - 8780:8780
      # 注：8780是容器内nginx的监听端口，反向代理了 8787、3131
    restart: always

##############################################

  v2raya:
    image: mzz2017/v2raya:latest
    container_name: v2raya
    hostname: v2raya
    # privileged: true
    volumes:
      - /lib/modules:/lib/modules:ro
      # 内核，如果不支持或者不想使用全局透明代理，则注释掉
      - /Volume1/docker/v2raya:/etc/v2raya
      # 配置文件
      - /etc/resolv.conf:/etc/resolv.conf
      # 需要预先创建好一个文件，不然会创建成文件夹；上面这条如果/etc内没有或不会进去新建resolv.conf，可以写下面这条
      # - /Volume1/docker/v2raya/resolv.conf:/etc/resolv.conf
    network_mode: host
    restart: always

##############################################
